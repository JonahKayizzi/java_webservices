/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.deitel.jhtp7.ch28.hugeintegerclient;

/**
 *
 * @author kayizzi
 */

//import classes for accessing HugeInteger web service's proxy
import com.deitel.jhtp7.ch28.usinghugeinteger.HugeInteger;
import com.deitel.jhtp7.ch28.usinghugeinteger.HugeIntegerService;

import javax.swing.JOptionPane; //used to display errors to the user

public class UsingHugeIntegerJFrame extends javax.swing.JFrame {

    private HugeIntegerService hugeIntegerService; //used to obtain proxy
    private HugeInteger hugeIntegerProxy; //used to access the web service
    
    // no-argument constructor
    public UsingHugeIntegerJFrame() {
        initComponents();
        
        try
        {
            //create the objects for accessing the HugeInteger web service
            hugeIntegerService = new HugeIntegerService();
            hugeIntegerProxy = hugeIntegerService.getHugeIntegerPort();
        }
        catch (Exception exception)
        {
            exception.printStackTrace();
        }
    } // end Using HugeIntegerJFrame constructor
    
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        directionsJLabel = new javax.swing.JLabel();
        firstJTextField = new javax.swing.JTextField();
        secondJTextField = new javax.swing.JTextField();
        addJButton = new javax.swing.JButton();
        subtractJButton = new javax.swing.JButton();
        biggerJButton = new javax.swing.JButton();
        smallerJButton = new javax.swing.JButton();
        equalsJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsJTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        directionsJLabel.setText("Enter two postive integers, up to 100 digits each");
        directionsJLabel.setName(""); // NOI18N

        addJButton.setText("Add");
        addJButton.setToolTipText("");
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });

        subtractJButton.setText("Subtract");
        subtractJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtractJButtonActionPerformed(evt);
            }
        });

        biggerJButton.setText("Greater Than");
        biggerJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                biggerJButtonActionPerformed(evt);
            }
        });

        smallerJButton.setText("Less Than");
        smallerJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smallerJButtonActionPerformed(evt);
            }
        });

        equalsJButton.setText("Equals");
        equalsJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalsJButtonActionPerformed(evt);
            }
        });

        resultsJTextArea.setColumns(20);
        resultsJTextArea.setRows(5);
        jScrollPane1.setViewportView(resultsJTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(subtractJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(biggerJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(smallerJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                        .addComponent(equalsJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(directionsJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(secondJTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                                .addComponent(firstJTextField, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(directionsJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(firstJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(secondJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addJButton)
                    .addComponent(subtractJButton)
                    .addComponent(biggerJButton)
                    .addComponent(smallerJButton)
                    .addComponent(equalsJButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
// invokes HugeInteger web service's add method to subtract the
     // second HugeInteger to the first
    private void addJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJButtonActionPerformed
        // TODO add your handling code here:
        String firstNumber = firstJTextField.getText();
         String secondNumber = secondJTextField.getText();
         
         if ( isValid( firstNumber ) && isValid( secondNumber ) )
         {
             try
             {
                 resultsJTextArea.setText(
                    hugeIntegerProxy.add( firstNumber, secondNumber ) );
                 System.setProperty("com.sun.xml.internal.ws.transport.http.client.HttpTransportPipe.dump", "true");
                             System.setProperty("com.sun.xml.internal.ws.transport.http.HttpAdapter.dump", "true");
             }//end try
             catch ( Exception e )
             {
                 JOptionPane.showMessageDialog( this, e.toString(),
                         "Add method failed", JOptionPane.ERROR_MESSAGE );
                 e.printStackTrace();
             } // end catch
         } //end if
    }//GEN-LAST:event_addJButtonActionPerformed

    
    // invokes HugeInteger web service's subtract method to subtract the
     // second HugeInteger from the first
    private void subtractJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subtractJButtonActionPerformed
        // TODO add your handling code here:
        String firstNumber = firstJTextField.getText();
         String secondNumber = secondJTextField.getText();
         
         if ( isValid( firstNumber ) && isValid( secondNumber ) )
         {
             try
             {
                 resultsJTextArea.setText(
                    hugeIntegerProxy.subtract( firstNumber, secondNumber ) );     
                 System.setProperty("com.sun.xml.internal.ws.transport.http.client.HttpTransportPipe.dump", "true");
                             System.setProperty("com.sun.xml.internal.ws.transport.http.HttpAdapter.dump", "true");
             }//end try
             catch ( Exception e )
             {
                 JOptionPane.showMessageDialog( this, e.toString(),
                         "Subtract method failed", JOptionPane.ERROR_MESSAGE );
                 e.printStackTrace();
             } // end catch
         } //end if    
    }//GEN-LAST:event_subtractJButtonActionPerformed

    // invokes HugeInteger web service's bigger method to determine whether
     // the first HugeInteger is greater than the second
    private void biggerJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_biggerJButtonActionPerformed
        // TODO add your handling code here:
        String firstNumber = firstJTextField.getText();
         String secondNumber = secondJTextField.getText();
         
         if ( isValid( firstNumber ) && isValid( secondNumber ) )
         {
             try
             {
                 boolean result =
                     hugeIntegerProxy.bigger( firstNumber, secondNumber );
                 System.setProperty("com.sun.xml.internal.ws.transport.http.client.HttpTransportPipe.dump", "true");
                             System.setProperty("com.sun.xml.internal.ws.transport.http.HttpAdapter.dump", "true");
                             
                 resultsJTextArea.setText( String.format( "%s %s %s %s",
                      firstNumber, ( result ? "is" : "is not" ), "greater than",
                      secondNumber ) );
             }// end try
             catch ( Exception e )
             {
                 JOptionPane.showMessageDialog( this, e.toString(),
                         "Bigger method failed", JOptionPane.ERROR_MESSAGE );
                 e.printStackTrace();
             } // end catch
         }//end if
    }//GEN-LAST:event_biggerJButtonActionPerformed

    
    // invokes HugeInteger web service's smaller method to determine whether
     // the first HugeInteger is less than the second
    private void smallerJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smallerJButtonActionPerformed
        // TODO add your handling code here:
        String firstNumber = firstJTextField.getText();
         String secondNumber = secondJTextField.getText();
         
         if ( isValid( firstNumber ) && isValid( secondNumber ) )
         {
             try
             {
                 boolean result =
                     hugeIntegerProxy.smaller(firstNumber, secondNumber );
                 System.setProperty("com.sun.xml.internal.ws.transport.http.client.HttpTransportPipe.dump", "true");
                             System.setProperty("com.sun.xml.internal.ws.transport.http.HttpAdapter.dump", "true");
                             
                 resultsJTextArea.setText( String.format( "%s %s %s %s",
                      firstNumber, ( result ? "is" : "is not" ), "less than",
                      secondNumber ) );
             }// end try
             catch ( Exception e )
             {
                 JOptionPane.showMessageDialog( this, e.toString(),
                         "Smaller method failed", JOptionPane.ERROR_MESSAGE );
                 e.printStackTrace();
             } // end catch
         }//end if
    }//GEN-LAST:event_smallerJButtonActionPerformed

      // invokes HugeInteger web service's equal's method to determine whether
     // the first HugeInteger is equal to the second
    private void equalsJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalsJButtonActionPerformed
        // TODO add your handling code here:
        String firstNumber = firstJTextField.getText();
         String secondNumber = secondJTextField.getText();
         
         if ( isValid( firstNumber ) && isValid( secondNumber ) )
         {
             try
             {
                 boolean result =
                     hugeIntegerProxy.equals( firstNumber, secondNumber );
                 
                 System.setProperty("com.sun.xml.internal.ws.transport.http.client.HttpTransportPipe.dump", "true");
                             System.setProperty("com.sun.xml.internal.ws.transport.http.HttpAdapter.dump", "true");
                             
                 resultsJTextArea.setText( String.format( "%s %s %s %s",
                      firstNumber, ( result ? "is" : "is not" ), "equal to",
                      secondNumber ) );
             }// end try
             catch ( Exception e )
             {
                 JOptionPane.showMessageDialog( this, e.toString(),
                         "Equals method failed", JOptionPane.ERROR_MESSAGE );
                 e.printStackTrace();
             } // end catch
         }//end if
    }//GEN-LAST:event_equalsJButtonActionPerformed

      
     //checks the size of a string to ensure that it is not big
     //to be used as a HugeInteger: esnure only digits  in String
     private boolean isValid( String number)
     {
         //check String's length
         if(number.length()>100)
         {
             JOptionPane.showMessageDialog(this,
                     "HugeIntegers must be <= 100 digits.", "HugeInteger Overflow",
                     JOptionPane.ERROR_MESSAGE);
             return false;
         }//ed if
         
         //look for nondigit characters in String
         for ( char c : number.toCharArray() )
         {
             if ( !Character.isDigit( c ) )
             {
                 JOptionPane.showMessageDialog( this, 
                      "There are nondigits in the String", 
                      "HugeInteger Contains Nondigit Characters", 
                      JOptionPane.ERROR_MESSAGE ); 
                 return false; 
             }//end if
         } // end for
         
         return true; //number can be used as a HugeInteger
     }// end method validate
    
    /**
     * @param args the command line arguments
     */
    
      //The initComponents method is autogenerated by Netbeans and is called
    //from the constructor to intialize the GUI. This method is not shown
    //here to save space. Open UsingIntegerJFrame.java in this
    //example's folder to view the complex generated coee (lines 37-153).
    
     
    //main method begins execution
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UsingHugeIntegerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UsingHugeIntegerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UsingHugeIntegerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UsingHugeIntegerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(
                new Runnable() 
                {
                    public void run() {
                        new UsingHugeIntegerJFrame().setVisible(true);
                    } //end method run
                }//end anonymous inner class
        ); //end call to java.awt.EventQueue.invokeLater
    } //end method main

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addJButton;
    private javax.swing.JButton biggerJButton;
    private javax.swing.JLabel directionsJLabel;
    private javax.swing.JButton equalsJButton;
    private javax.swing.JTextField firstJTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea resultsJTextArea;
    private javax.swing.JTextField secondJTextField;
    private javax.swing.JButton smallerJButton;
    private javax.swing.JButton subtractJButton;
    // End of variables declaration//GEN-END:variables
          //private javax.swing.JScrollPane resultsJScrollPane;
            
} //end class UsingHugeIntegerJFrame
